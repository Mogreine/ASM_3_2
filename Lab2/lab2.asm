.MODEL SMALL
.STACK 200h
.CODE
.386
LOCALS
.DATA
	PROG_INTRO DB "Type your string:$"
	INPUT_STR DB 50 DUP('$')
	RESULT_STR DB 50 DUP('$')
	STR1_START DW 0
	STR2_START DW 0
	LEN1 DW 0
	LEN2 DW 0
	STR_IND DW 0
	CHECK_STR DB 20 DUP('$')
	OUTPUT_STR DB "The union of 2 string: $"
.CODE
EXTRN READ_STR: FAR
EXTRN STR_LEN: FAR
EXTRN REVERSE_STR: FAR
EXTRN TO_BINIRY_STRING: FAR
EXTRN BIN_TO_INT: FAR
EXTRN FILL_STR: FAR
EXTRN PRINT: FAR
EXTRN PRINTLN: FAR
EXTRN PRINT_CHAR: FAR
;-------------------
; Arguments: DX - pointer
FIND_MAX_STRS	PROC FAR
	PUSHAD
	PUSH SI
	MOV SI, DX
	MOV CX, 0
@FIND_MAX_STRS_MAIN_CYCLE:
	CMP BYTE PTR [SI], '$'
	JE @NEW_WORD
	CMP BYTE PTR [SI], 0
	JE @NEW_WORD
	CMP BYTE PTR [SI], ' '
	JE @NEW_WORD
	INC CX
	INC SI
	INC STR_IND
	JMP @FIND_MAX_STRS_MAIN_CYCLE
@NEW_WORD:
	CMP CX, LEN1
	JGE @GREATER_LEN1
	CMP CX, LEN2
	JGE @GREATER_LEN2
	JMP @NEW_WORD_END
@GREATER_LEN1:
	MOV AX, LEN1 
	MOV LEN2, AX
	MOV AX, STR1_START
	MOV STR2_START, AX
	MOV LEN1, CX
	MOV AX, STR_IND
	MOV STR1_START, AX
	SUB STR1_START, CX
	JMP @NEW_WORD_END
@GREATER_LEN2:
	MOV LEN2, CX
	MOV AX, STR_IND
	MOV STR2_START, AX
	SUB STR2_START, CX
@NEW_WORD_END:
	CMP BYTE PTR [SI], '$'
	JE @FIND_MAX_STRS_MAIN_CYCLE_END
	CMP BYTE PTR [SI], 0
	JE @FIND_MAX_STRS_MAIN_CYCLE_END
	INC SI
	INC STR_IND
	MOV CX, 0
	JMP @FIND_MAX_STRS_MAIN_CYCLE	
@FIND_MAX_STRS_MAIN_CYCLE_END:
	POP SI
	POPAD
	RET
FIND_MAX_STRS ENDP

.DATA
	CONTAINS_RES DB 0
.CODE
;--------------------------------------------------
; Arguments: DX - string pointer, CX - length, BL - char to find
CONTAINS PROC FAR
	PUSHAD
	PUSH SI
	MOV AL, BL
	MOV BX, DX
	MOV SI, 0
	MOV CONTAINS_RES, 0
	CMP CX, 0
	JNE @CONTAINS_CYCLE_START
	CALL STR_LEN
@CONTAINS_CYCLE_START:
	CMP SI, CX 
	JGE @CONTAINS_CYCLE_END
	CMP BYTE PTR[BX + SI], AL
	JE @CONTAINS_TRUE
	INC SI
	JMP @CONTAINS_CYCLE_START
@CONTAINS_TRUE:
	MOV CONTAINS_RES, 1
	JMP @CONTAINS_CYCLE_END
@CONTAINS_CYCLE_END:
	POP SI
	POPAD
	MOV BL, CONTAINS_RES
	RET
CONTAINS ENDP	

START:
	MOV AX, @DATA
	MOV DS, AX
	
	LEA DX, PROG_INTRO
	CALL PRINTLN
	
	LEA DX, INPUT_STR
	MOV CX, 49
	CALL READ_STR
	CALL FIND_MAX_STRS
	
	LEA DX, CHECK_STR
	MOV ECX, 0
	MOV CX, LEN1
	CALL TO_BINIRY_STRING
	CALL PRINTLN
	
	CALL STR_LEN
	CALL FILL_STR
	
	LEA DX, CHECK_STR
	MOV ECX, 0
	MOV CX, LEN2
	CALL TO_BINIRY_STRING
	CALL PRINTLN
	
	; Putting pointers at the begining of words to merge
	LEA SI, INPUT_STR
	LEA DI, INPUT_STR
	ADD SI, STR1_START
	ADD DI, STR2_START
	
	MOV DX, DI	
	LEA DI, RESULT_STR
	MOV CX, 0
@MERGE_CYCLE_START:
	CMP CX, STR1_START
	JE @MERGE_CYCLE_END
	MOV BL, BYTE PTR [SI]
	PUSH CX
	MOV CX, LEN2
	CALL CONTAINS
	POP CX
	CMP BL, 0
	JE @MERGE_CYCLE_NEXT_SYMB
	; Checking on duplicate
	PUSH DX
	LEA DX, RESULT_STR
	PUSH CX
	MOV CX, 0
	MOV BL, BYTE PTR [SI]
	CALL CONTAINS
	POP CX
	POP DX
	CMP BL, 1
	JE @MERGE_CYCLE_NEXT_SYMB
	MOV BL, BYTE PTR [SI]
	MOV BYTE PTR [DI], BL
	INC DI
@MERGE_CYCLE_NEXT_SYMB:
	INC CX
	INC SI
	JMP @MERGE_CYCLE_START
@MERGE_CYCLE_END:
	LEA DX, OUTPUT_STR
	CALL PRINT
	LEA DX, RESULT_STR
	CALL PRINTLN
	
	MOV AH, 4CH
	INT 21H
END START